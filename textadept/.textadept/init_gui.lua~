

-- Useful for making it clear from the main config file, 
-- what we're doing with the theme. 
function load_theme (buffer)
	loadfile(_USERHOME.."/themes/current_theme.lua", "t", {
		_G=_G,
		BUFFER=buffer or _G.buffer,
		THEME="sand",
		FONT="Liberation Mono",
		FONTSIZE=15,
	})()
end

-- Load the theme for this buffer.
load_theme()

-- Confirm saves with a dialog box.
events.connect(events.FILE_AFTER_SAVE, function (filename)
  local basename = filename:match("^.+/(.+)")
	ui.statusbar_text = string.format("Wrote file '%s' to disk!", basename)
end)

events.connect(events.LEXER_LOADED, function (lang)
	if lang == "lua" then
		ui.print(lua)
	end
end)

--[[
local alert = modcreate(require "alert")
local greet = modcreate(alert, require "greet")

local greet = require("greet").deps(alert)
--]]



--[[
local alert = create()
local special_keys = create(alert, current_line)
--]]
	
--[[
local my_modlist = {
	"current_line",
	"select_lines",
	"alert",
	"term",
	"config",
	"rename_file",
	"select_lexified",
	"define_mode",
	"deep_copy",
	"nav",
	"god_mode",
	"file_opener",
	"series",
	--"select_command",
}
--]]



--[=[
events.connect(events.INITIALIZED, function ()
	local report
	

	local function load_modules (modlist)
		local lmods = {}
		
		for _, name in ipairs(modlist) do
			local status, mod = pcall(require, name)

			if not status then -- we all know what this means. :)
				return false, string.format("Error in module '%s': \n%s\nAborting config.", name, mod)
			end
			
			-- Check the availability of the module name, before making it global.
			if _G[name] ~= nil then
				return false, string.format("Name '%s' already taken.\nAborting config.", name)
			end
				
			lmods[name] = mod
		end
	
		return true, lmods
	end
	
	do
		local status, lresult = load_modules(my_modlist)
		
		if status then
			for name, mod in pairs(lresult) do
				_G[name] = mod
			end
		
			alert("Success")
		else
			ui.print(lresult)
			return
		end
	end
	
	--keys.au = select_command()
	--[[
	events.connect(events.QUIT, function ()
		local button = ui.dialogs.ok_msgbox {
			title = "Confirm",
			informative_text = "Really quit?",
			icon = "gtk-dialog-question",
		}
	
		return button == 2
	end)
	--]]
	
	-- An example mode.
	--keys.ci = nav.load()
	
	-- Another mode.
	--keys.ci = god_mode.load()

	
	-- Modify cN to select the trailing newline, so that we can indent single lines.
	--[[
	keys.cN = function ()
		local line = current_line() + 1 
		select_lines(line, line)
	end
	]]
	
	keys["c>"] = function ()
		buffer:line_end_extend()
	end
	
	keys["c<"] = function ()
		buffer:home_extend()
	end
	
	keys["ct"] = function ()
		view:goto_buffer(1)
	end
	
	keys["cT"] = function ()
		view:goto_buffer(-1)
	end
	
end)
--]=]